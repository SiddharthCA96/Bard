// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String?  @unique
  name        String? 
  number      String  @unique
  password    String
  OnRampTransaction OnRampTransaction[]
  Balance Balance[]
  //use name to differentiate btw ambigous relation ( two relations between the same two models)
  sentTransfers P2Pransactions[] @relation(name: "FromUserRelation")
  receivedTransfers P2Pransactions[] @relation(name: "ToUserRelation")
}

model OnRampTransaction{
  id    Int  @id @default(autoincrement())
  status OnRampStatus
  token  String @unique
  provider String
  amount Int
  startTime DateTime
  userId Int
  user User @relation(fields: [userId],references: [id])
}
model Balance {
  id      Int    @id @default(autoincrement())
  userId  Int    @unique
  amount  Int    @default(0)
  locked  Int    @default(0)
  user    User   @relation(fields: [userId], references: [id])
}
model P2Pransactions {
  id Int @id @default(autoincrement())
  amount Int
  timestamp DateTime
  senderId Int
  receiverId Int
  fromUser User @relation(name: "FromUserRelation",fields: [senderId],references: [id])
  toUser User @relation(name: "ToUserRelation",fields: [receiverId],references: [id])
}

enum AuthType {
  Google
  Github
}
enum OnRampStatus {
  Success
  Failure
  Processing
}

enum P2PType {
  Food
  Travel
  Education
  Entertainment
  Medicine
  Telecom
}