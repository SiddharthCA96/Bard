generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String?             @unique
  name              String?
  number            String              @unique
  password          String
  Balance           Balance?
  OnRampTransaction OnRampTransaction[]
   bankAccounts BankAccount[]
  receivedTransfers P2Pransactions[]    @relation("ToUserRelation")
  sentTransfers     P2Pransactions[]    @relation("FromUserRelation")
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int  @default(0)
  locked Int  @default(0)
  user   User @relation(fields: [userId], references: [id])
}

model P2Pransactions {
  id         Int       @id @default(autoincrement())
  amount     Int
  timestamp  DateTime
  senderId   Int
  receiverId Int
  status     P2PStatus
  type       P2PType
  toUser     User      @relation("ToUserRelation", fields: [receiverId], references: [id])
  fromUser   User      @relation("FromUserRelation", fields: [senderId], references: [id])
}
model Bank {
  id Int @id @default(autoincrement())
  name  String @unique
  bankAccount BankAccount[]
}
model BankAccount {
  id Int @id @default(autoincrement())
  accountNumber String @unique
  userId Int
  user User @relation(fields: [userId],references: [id])
  bankId Int 
  balance     Decimal   @default(500.00)
  bank Bank @relation(fields: [bankId],references: [id])
  transactions BankTransaction[]
}
model BankTransaction {
  id Int @id @default(autoincrement())
  transactionId String    @unique
  amount        Decimal
  type          TransactionType
  status        TransactionStatus
  createdAt     DateTime  @default(now())
  account       BankAccount @relation(fields: [accountId], references: [id])
  accountId     Int
}
enum TransactionType {
  TRANSFER_TO_BANK
  TRANSFER_TO_WALLET
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}

enum P2PType {
  Food
  Travel
  Education
  Entertainment
  Medicine
  Telecom
}

enum P2PStatus {
  Success
  Failure
  Processing
}
